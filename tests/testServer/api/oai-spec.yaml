openapi: "3.0.0"
servers:
  - url: 'http://testingserver/api/v1'
info:
  version: 1.0.0
  title: Valid specification file
  license:
    name: MIT
paths:
  /multipartFormdata:
    post:
      summary: testing a multipart form with upload file and regular parameters
      operationId: createPetsViaMultipartFormdata
      x-router-controller: "petsController"
      tags:
        - pets
      requestBody:
        required: true
        description: Pet to add to the store via an uploaded file and regular parameters
        x-name: petViaForm
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - id
                - name
              properties:
                file:
                  type: string
                  format: binary
                  description: a binary file uploaded via openAPI spec
                id:
                  type: string #it's a form field, so will always be a string
                name:
                  type: string
      responses:
        '201':
          description: Update status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /paramTestsQuery:
    get:
      summary: This path is only for tests
      operationId: paramTestsQuery
      tags:
        - pets
      parameters:
        - name: integerParam
          in: query
          description: Integer parameter to test validation
          required: true
          schema:
            type: integer
            format: int32
        - name: booleanParam
          in: query
          description: Boolean parameter to test validation
          required: true
          schema:
            type: boolean
        - name: stringParam
          in: query
          description: string parameter to test validation
          required: true
          schema:
            type: string
        - name: doubleParam
          in: query
          description: string parameter to test validation
          required: true
          schema:
            type: number
      responses:
        '200':
          description: An paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-router-controller: "petsController"
      #x-router-controller: "Default"
  /paramTestsPath/{integerParam}/{booleanParam}/{stringParam}/{doubleParam}:
    get:
      summary: This path is only for tests
      operationId: paramTestsPath
      tags:
        - pets
      parameters:
        - name: integerParam
          in: path
          description: Integer parameter to test validation
          required: true
          schema:
            type: integer
            format: int32
        - name: booleanParam
          in: path
          description: Boolean parameter to test validation
          required: true
          schema:
            type: boolean
        - name: stringParam
          in: path
          description: string parameter to test validation
          required: true
          schema:
            type: string
        - name: doubleParam
          in: path
          description: string parameter to test validation
          required: true
          schema:
            type: number
      responses:
        '200':
          description: An paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-router-controller: "petsController"
      #x-router-controller: "Default"
  /operationTests:
    get:
      summary: This path is only for tests
      operationId: operationTests
      tags:
        - pets
      security: [
        FourthBearer: []
      ]
      responses:
        '200':
          description: The operation
          content:
            application/json:
              schema:
                type: object
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-router-controller: "petsController"
      #x-router-controller: "Default"
  /ownershipTest/{idParam}:
    get:
      summary: This path is for testing ownership control
      operationId: ownershipTest
      tags:
        - pets
      parameters:
        - name: idParam
          in: path
          description: ID to check ownership
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A sample response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-router-controller: "petsController"
  /ownershipBindingTest/{sampleParam}:
    get:
      summary: This path is for testing ownership control with acl binding
      operationId: ownershipBindingTest
      tags:
        - pets
      parameters:
        - name: sampleParam
          in: path
          description: ID to check ownership
          required: true
          schema:
            type: string
          x-acl-binding: idParam
      responses:
        '200':
          description: A sample response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-router-controller: "petsController"
  /responseBodyTest:
    get:
      summary: should return an object with both right and wrong properties
      operationId: responseBodyTest
      tags:
        - pets
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseTest"
      x-router-controller: "petsController"
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: An paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      #x-router-controller: "petsController"
      #x-router-controller: "Default"
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      requestBody:
        description: Pet to add to the store
        x-name: pet
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '201':
          description: Update status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      #x-router-controller: "petsController"
      #x-router-controller: "Default"
    delete:
        description: deletes all the pets
        operationId: deletePets
        responses:
          '204':
            description: pets deleted
          default:
            description: unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        #x-router-controller: "petsController"
        #x-router-controller: "Default"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        '404':
          description: pet not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      #x-router-controller: "petsController"
      #x-router-controller: "Default"
    put:
      description: updates a pet based on its petId
      operationId: updatePet
      parameters:
          - name: petId
            in: path
            description: ID of pet to update
            required: true
            schema:
              type: integer
              format: int64
      requestBody:
        description: Pet to update
        x-name: pet
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
          '200':
            description: pet updated
          '404':
            description: pet not found
          default:
            description: unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      #x-router-controller: "petsController"
      #x-router-controller: "Default"
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to delete
          schema:
            type: integer
      responses:
        '204':
          description: pet deleted
        '404':
          description: pet not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      #x-router-controller: "petsController"
      #x-router-controller: "Default"
  /securityFile:
    get:
      summary: Security config file
      operationId: securityFile
      security: []
      tags:
        - pets
      responses:
        '200':
          description: A security config file
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                  key:
                    type: string
      x-router-controller: "petsController"
  /grantsFile:
    get:
      summary: Auth config file
      operationId: grantsFile
      security: []
      tags:
        - pets
      responses:
        '200':
          description: An auth config file
          content:
            application/json:
              schema:
                type: object
      x-router-controller: "petsController"
  /tokenVerificationTest:
    get:
      summary: Token test
      operationId: tokenVerificationTest
      security: [
        FourthBearer: []
      ]
      tags:
        - pets
      responses:
        '200':
          description: A sample response
          content:
            application/json:
              schema:
                type: object
      x-router-controller: "petsController"
  /contentTypeTest:
    get:
      summary: Auth config file
      operationId: contentTypeTest
      security: []
      tags:
        - pets
      responses:
        '200':
          description: An auth config file
          content:
            application/json:
              schema:
                type: object
            text/csv:
              schema:
                type: object
      x-router-controller: "petsController"
  /wrongResponseCode:
    get:
      summary: Returns a wrong response code
      operationId: wrongResponseCode
      security: []
      tags:
        - pets
      responses:
        '200':
          description: A sample object
          content:
            application/json:
              schema:
                type: object
      x-router-controller: "petsController"
  /commonParamTest:
    parameters:
        - name: testParam
          in: query
          description: Test parameter
          required: true
          schema:
            type: integer
            format: int64
    get:
      summary: Common parameters test
      operationId: commonParamTest
      tags:
        - pets
      responses:
        '200':
          description: A sample response
          content:
            application/json:
              schema:
                type: object
      x-router-controller: "petsController"
  /overrideCommonParamTest:
    parameters:
        - name: testParam
          in: query
          description: Test parameter
          required: true
          schema:
            type: string
    get:
      summary: Override common parameters test
      operationId: commonParamTest
      tags:
        - pets
      parameters:
        - name: testParam
          in: query
          description: Test parameter
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A sample response
          content:
            application/json:
              schema:
                type: object
      x-router-controller: "petsController"
  /nullableResponseTest:
    get:
      summary: Nullable test
      operationId: nullableResponse
      security: []
      tags:
        - pets
      responses:
        '200':
          description: A sample response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  text:
                    type: string
                    nullable: true
      x-router-controller: "petsController"
  /defaultResponseCode:
    get:
      summary: Returns a default response code
      operationId: defaultResponseCode
      security: []
      tags:
        - pets
      responses:
        default:
          description: A sample object
          content:
            application/json:
              schema:
                type: object
      x-router-controller: "petsController"
security:
  - Bearer: []
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearer-config: http://localhost:8080/api/v1/securityFile
      x-acl-config: http://localhost:8080/api/v1/grantsFile
    SecondBearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ThirdBearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    FourthBearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ResponseTest:
      type: array
      items:
        $ref: "#/components/schemas/TestObject"
    TestObject:
      required:
        - integerProperty
        - booleanProperty
        - stringProperty
        - doubleProperty
      properties:
        integerProperty:
          type: integer
        booleanProperty:
          type: boolean
        stringProperty:
          type: string
        doubleProperty:
          type: number
    Pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
